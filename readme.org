* jekyll-org

** Overview
   This plugin adds org-mode support to Jekyll. it renders the
   org-mode file in posts and pages.

   TODO: and syntax highlighting 

** Requirements
- Jekyll
- org-ruby
   
** Installation
   1. install org-ruby
#+BEGIN_SRC sh
$ sudo gem install org-ruby
#+END_SRC
   2. clone the jekyll-org plugin

#+BEGIN_SRC sh
$ git clone http://github.com/eggcaker/jekyll-org.git /path/to/jekyllpath/_plugins/jekyll-org
#+END_SRC

   if you want use jekyll-org as a submodule, sure you can 
 
#+BEGIN_SRC sh
$ cd /path/to/your/jekyll/site/
$ git submodule add http://github.com/eggcaker/jekyll-org.git _plugins/jekyll-org
#+END_SRC
 
 
** Usage

create a new file with .org extesion in _posts, and write post with org-mode. this all.
then generate you jekyll site.

*** **NOTES** for liquid language

by default the all content export to raw html format with org-ruby. but you wan add =#+liquid: whatevervalue==
in the header.  then you can use some liquid languages. 

#+BEGIN_EXAMPLE
#+liquid: enabled
#+foo: hello world

{{ page.foo }} 

or 

{{ site.time | date_to_xmlschema }}

#+END_EXAMPLE

then you will get output like 

#+BEGIN_EXAMPLE
<p>hello world</p>
<p>or</p>
<p>2014-07-02T08:20:28+08:00</p>
#+END_EXAMPLE
   
if you write something like ={{ 'hello' | upcase }}= 
with ' still not woring yet.

** Source code Highlighting
  added source code block same as in org-mode, add a block,for example ruby: 

  #+BEGIN_EXAMPLE
  #+BEGIN_SRC 
   require 'rubygems'
   require 'org-ruby'
   data = IO.read(filename)
   puts Orgmode::Parser.new(data).to_html
  #+END_SRC
  #+END_EXAMPLE

  then  you got code highlighting 

  #+BEGIN_SRC ruby
   require 'rubygems'
   require 'org-ruby'
   data = IO.read(filename)
   puts Orgmode::Parser.new(data).to_html
  #+END_SRC
  
** Author
   eggcaker <eggcaker@gmail.com>

** License
   MIT
